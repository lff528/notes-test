目标
使团队内的Javascript代码风格统一、容易被阅读和理解,从而减小沟通成本和维护成本,提升团队的整体开发效率.

代码风格
文件编码
统一使用无BOM的UTF-8编码格式.

缩进
Icon
只有不同层级的代码才需要缩进,同级别的代码要保持同样的缩进级别

统一使用4个空格作为一个缩进层级

禁止2个空格作为一个缩进层级

可以使用tab键快速缩进一个层级,但需要设置一个tab缩进层级为4个空格

/**
 * 缩进demo
 * 函数体内变量声明和if语句,属于函数test的子级代码,需要缩进1个层级
 * 变量声明和if语句为同一个级别,有着相同的缩进层级
 */
function test() {
    var flag = true;
    if (flag) {
        // …… 执行代码
    }
}
switch下的case和default是switch的子级,所以switch下的case和default都要缩进一个层级.
function tests(flag){
    switch(flag){
        case 1:
            // ……
            break;
        case 2:
            // ……
            break;
        default:
            // ……
    }
}
空格
二元运算符两侧必须要留且仅留有一个空格

// 二元运算符=和*两侧都留有且只留有留1个空格
total = num * price;
一元运算符与操作对象之间不需要留有空格

// 一元运算符++与操作对象num之间没有空格
sum = num++;
用作代码块起始的左大括号{前面要有一个空格

// 左大括号与前面的=之间有一空格
var obj = {
    name: "Nicholas",
    mobile: 13267679898
};
对象中键值对之间的冒号:前面不要有空格,冒号后面要有一个空格

// 对象obj中属性name、mobile和值之间的冒号,冒号前没有空格,冒号后留有了一个空格
var obj = {
    name: "Nicholas",
    mobile: 13267679898
};
函数声明、函数表达式、函数调用中,函数名和左小括号(之间不能有空格

// 函数声明
function getUsersById(id) {
    //…… 执行代码
}
// 函数调用
getUsersById(userId);
 
// 表达式函数,这里的function和后面的(之间有一个空格,注意这里的function不是函数名,而是一个关键字
var add = function (a, b) {
    return a + b;
};
Javascript中常用关键字(if、else、for、switch、while、function、do、try、catch、finally)后需要留有一个空格

var result = 0;
var i = 0;
do {
    i += 1;
    result += i;
} while (i < 5)
逗号,和分号;与前面的内容之间不能有空格,逗号(,)后如果有内容,则逗号(,)后需要且仅能添加一个空格

// 逗号(,)前面不能留有空格,后面留有且仅有一个空格
function getUsers(user, mobile) {
    // …… 执行代码
}
单行声明的数组,如果数组内包含元素,则[]内紧贴内容元素的部分,不能留有空格

var fruits = ["apple", "banana", "pear"];
对象字面量声明的对象,统一使用多行声明的方式,每行一个属性

// 声明对象,使用对象字面量方式,每个属性占一行
var obj = {
    name: "Nicholas",
    mobile: 13267679898
};
行尾不能留有多余的空格,不管结束的内容是什么
换行
每个独立的语句结束必须要换行

以分号(;)表示每个独立语句的结束

行尾表示语句结束的分号(;)不可省略

在有运算符的语句换行时,运算符必须位于新行的起始位置

var sum = num1 + num2 + num3
    + num4 + num5;
在任何场景下,包括函数声明、函数表达式、函数调用、创建对象、算法处理等,都不允许在逗号(,)和分号(;)前换行

// 都不能在逗号(,)和分号(;)前换行
var Person = {
    name: "Nicholas",
    mobile: 13290987628,
    age: 18
};
for (var i = 0; i < 10; i++) {
    //…… 执行代码
}
不同的行为或逻辑语句之间添加一个空行(这一点不好从规则上判断,需要团队在磨合中达成默契,统一标准)

Vue.use(Vuex);
 
// 下面的对象声明和上面的代码属性不同的行为,也不属于相同的逻辑,中间加了一个空行
const store = new Vuex.Store({
  state:{
    count: 0
  }
});
语句
Javascript语句以分号(;)表示语句的结束

在if、else、for、while、do等流程控制语句中,不得省略语句块中的{},即使语句块中只有一行执行语句

函数声明语句结尾不添加分号(;)

函数表达式结尾添加分号(;)

命名
禁止使用单字母命名
禁止使用语言关键字、保留字做变量名
变量命名
小驼峰的命名方式
以名词开头,或者以修饰名词的形容词开头

// 小驼峰命名
let tatbleTitle = "Table Title";
 
// 修饰名词的形容词开头
let bigHouse = "";
当变量表示一种状态时,使用动词加+形容词/名词

常用可表示状态的动词如下:

动词
含义
返回值
can	判断是否可以执行某个动作或权限	布尔值,true:可执行,有权限;false:不可执行,无权限
has	判断是否含有某个值	布尔值,true:包含此值;false:不包含此值
is	判断是否为某个值	布尔值,true:是某个值;false:不为某个值
// is + 名词,表示是否已登录
var isLogin = true;
Icon
这里的表示状态的变量命名规则,当作是一个特例存在,因为这里的命名规则和函数、方法的命名规则一致了,都是用动词+名词的形式

常量命名
全部使用大写字母,多个单词组成的常量,单词与单词之间使用下划线分隔

// 单词max和count之间用下划线分隔
var MAX_COUNT = 100;
函数命名
小驼峰的命名方式,以动词开始,后根名词
优雅的命名为动宾短语
函数、方法参数的命名方式,参考变量的命名规则
常见、使用频率较高的的动词约定:

动词
含义
返回值
can	判断是否可以执行某个动作,或拥有某个权限	布尔值,true:可执行,有权限;false:不可执行,无权限
has	判断是否含有某个值	布尔值,true:含有某值;fasle:不含有某个值
is	判断是否为某个值或某状态	布尔值,true:是某个值;false:不是某个值
get	获取某个值	非布尔值
set	设置某个值	无返回值
load	加载数据	1.无返回值 2.返回数据是否加载完成的结果
// 判断是否登录状态
function isLogin() {
    return true;
}
 
// 判断能否登录
function canLogin() {
    return true;
}
 
// 判断用户是否存在
function hasUser(userName) {
    return true;
}
 
// 获取用户
function getUsers() {
    let Users = [];
    return Users;
}
 
 
// 设置用户信息
function setUser(user) {
 
}
 
// 加载用户数据
function loadUser() {
    let flag = false;
}
枚举对象
枚举对象的属性名,全部使用大写字母,如果变量是由多个单词组合而成,则单词之间使用下划线分隔

var fruits = {
    "APPLE": 1,
    "BANANA": 2,
    "PEAR": 3,
    "PEACH": 4
};
类、构造函数命名
使用大驼峰的命名方式
名称只能使用名词

/**
 * 声明Person类
 * 类名Person为名词
 */
class Person {
    constructor(name, mobile) {
        this.name = name;
        this.mobile = mobile;
    }
}
对象中属性、方法的命名
对象中属性的命名,参考变量和常量的命名规则
对象中方法及方法参数的命名参考函数及函数参数的命名规则
常用特定变脸的命名
iOS 首字母i小写,OS全部大写,无论这个组合出现在变量中的任何位置,这个变量组合的命名始终不变.
Android 首字母大写,之后的字母全部小写,无论这个单词组合出现在变量的任何位置,都保持这个命名不变
URL 所有字母均大写,无论该组合出现在变量的任何位置,都保持这个命名特征不变
文件命名
全部用小写字母
如果文件名有多个单词组合而成,则单词之间使用横线连接
文件名中不能出现空格
如果有表示从属关系的文件名,则使用英文句号(.)连接

jquery.js
jquery.form.js
vue-router.js
注释
单行注释
单行注释单独占一行,并且要和下面被注释的代码保持同样的缩进,//后留一空格

// 单行注释
var userName = "Nicholas";
多行注释
禁止使用/*……*/这样的多行注释
统一使用/**……*/这样的多行注释
多行注释中,禁止出现空的注释行

// 这是一个不好的注释,出现了空的注释行,这一行什么注释内容都没有
/**
 * 获取城市配置信息详情
 *
 * @param {string} city_id 城市ID
 */
文件注释
文件顶部需要标识文件的注释,使用@file标识文件注释
文件注释以/**……*/包裹
@date标识文件创建日期
@author标识文件的作者:当文件创建之后有其他更新维护的时候,可以将修改人姓名直接跟在前面的作者后面之后即可

/**
 * @file 时间工具,处理各种时间格式转换
 * @date 2019.08.20
 * @author 作者1,作者2
 */
函数、方法注释
函数、方法的注释使用/**……*/包裹
注释内容
函数、方法说明
参数说明:@param + {参数类型}  + 参数名称 + 参数说明
返回值说明:@return + {返回值类型} + 返回值描述(如果无返回值,则返回值类型为void)

/**
 * 函数描述
 * @param {string} p1 参数p1说明
 * @param {string} p2 参数p2的说明
 * @param {string} p3 参数p3说明
 * @return {object} 返回值描述
 */
function foo(p1, p2, p3) {
    let p = p1 == p2 ? p2 : p3;
    return {
        p,
        p1: p1,
        p2: p2,
        p3: p3
    }
}
事件注释
用/**……*/多行注释包裹
事件触发信息:@event标识触发事件的元素和事件类型
参数:@param标识处理事件的回调函数的参数信息,具体可参考函数、方法参数的注释规则

/**
 * 事件描述
 * @event .ipt.change
 * @param {number} price 价格
 * @param {nuber} num 数量
 * @return {num} 总价
 */
$(".ipt").change(function (price, num) {
    var sum = price * num;
    return sum;
});
常量注释
常量说明
使用@const标识关键字
使用@type关键字标识常量类型

/**
 * 常量说明
 * @const
 * @type {number}
 */
const MAX_COUNT = 10;
细节注释
对于一些函数内部的实现、不容易理解的逻辑说明、摘要信息等,需要添加细节注释
细节注释,以单行注释形式进行注释
内容过长了则换行,以多个单行注释方式注释

/**
 * 细节注释demo
 */
function point() {
    // 细节注释
    // 内容太长了,换行注释了
    for (var i = 0; i < 10; i++) {
        // …… 执行代码
    }
}
语言特性
变量
必须先声明后使用

变量声明的关键字var、let、const,每次只能声明一个变量

变量需要在当前作用域的起始位置声明

循环
不要在循环体内声明函数表达式,将函数声明提取到循环体的外面

在循环内多次使用到的不变的值,应该在循环外使用变量缓存

// 优秀的实现
var elementLength = element.length;
for (var i = 0; i < elementLength; i++) {
    // …… 执行代码
}
 
// 糟糕的实现
for(var i = 0; i < element.length; i++){
    // …… 执行代码
}
对象
能使用对象字面量的方式创建的时候,就不要使用new关键字来创建

对象的属性统一加双引号,或者统一不加引号

禁止属性有的加引号,有的不加引号,而且引号格式不统一

// 优秀的编码实现
var person = {
    name: "Nicholas",
    mobile: 13298987654
};
 
// 糟糕的代码
var person = {
    name: "Nicholas",
    "mobile": 13298987654
};
禁止修改内置对象的任何原生属性和方法

// 修改了内置对象String的原生方法trim的实现,禁止修改
String.prototype.trim = function () {
    // …… 执行代码
}
属性访问时,能使用点(.)的时候,就不要使用[expr]的方式来访问(一般情况下自定义对象都是可以通过.来实现对属性的访问)

// 通过.实现对属性和方法的调用
var person = {
    name: "Nicholas",
    mobile: 13298987654,
    eat: function () {
        console.log("人间美味");
    }
};
console.log(person.name);
person.eat();
数组
使用字面量的方式[]创建数组,除了需要创建指定长度的数组以外

// 一般情况下使用字面量的方式创建数组
var arr = ["apple", "pear", "banana"];
 
// 通过new关键字声明需要指定数组长度的数组
var fruitsArr = new Array(5);
禁止使用for in循环便利数组

函数
每个功能函数只能实现一个功能

闭包:使用了闭包要释放内存

能不使用闭包的情况尽量不要使用闭包